/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.NurseRole;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Utils.MyIntegerVerifier;
import Business.VitalSigns.VitalSign;
import Business.WorkQueue.AppointmentWorkRequest;
import Business.WorkQueue.GetDiagnosisWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.sql.Timestamp;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class NurseWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private NurseOrganization nurseOrganization;
    private AppointmentWorkRequest appointmentWorkRequest;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public NurseWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.nurseOrganization = (NurseOrganization)organization;
        txtHeartRate.setEditable(false);
        txtRespiratoryRate.setEditable(false);
        txtSystolicBloodPressure.setEditable(false);
        txtWeight.setEditable(false);
        
        MyIntegerVerifier miv = new MyIntegerVerifier();
        txtHeartRate.setInputVerifier(miv);
        txtRespiratoryRate.setInputVerifier(miv);
        txtSystolicBloodPressure.setInputVerifier(miv);
        txtWeight.setInputVerifier(miv);
        populateTable();
    }   
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
                
        model.setRowCount(0);
        
        //LabTestWorkRequest ltwruserAccount.getWorkQueue().getWorkRequestList();
        
           for(WorkRequest request1: userAccount.getWorkQueue().getWorkRequestList()){
                if(request1 instanceof AppointmentWorkRequest){
 

                    Object[] row = new Object[6];
                    row[0] = request1;
                    row[1] = ((AppointmentWorkRequest) request1).getAppointmentDateTime();
                    row[2] = request1.getSender().getEmployee().getName();
                    row[3] = ((AppointmentWorkRequest) request1).getPatient();
                    row[4] = request1.getReceiver() == null ? null : request1.getReceiver().getEmployee().getName();
                    row[5] = request1.getStatus();


                    model.addRow(row);
                }
            }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnSendDiagnosis = new javax.swing.JButton();
        lblRespiratoryRate = new javax.swing.JLabel();
        txtRespiratoryRate = new javax.swing.JTextField();
        lblWeight = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        lblWeight1 = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JTextField();
        lblHeartRate = new javax.swing.JLabel();
        txtHeartRate = new javax.swing.JTextField();
        lblSystolicBloodPressure = new javax.swing.JLabel();
        txtSystolicBloodPressure = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Message", "AppointmentTime", "Sender", "Patient", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workRequestJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 720, 140));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(179, 235, 193));

        btnSendDiagnosis.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnSendDiagnosis.setText("Send VitalSigns");
        btnSendDiagnosis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendDiagnosisActionPerformed(evt);
            }
        });

        lblRespiratoryRate.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblRespiratoryRate.setText("Respiratory Rate");

        txtRespiratoryRate.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtRespiratoryRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRespiratoryRateActionPerformed(evt);
            }
        });

        lblWeight.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblWeight.setText("Weight (in Pounds)");

        txtWeight.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblWeight1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblWeight1.setText("Patient Name");

        txtPatientName.setEditable(false);
        txtPatientName.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblHeartRate.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblHeartRate.setText("Heart Rate");

        txtHeartRate.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblSystolicBloodPressure.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblSystolicBloodPressure.setText("Blood Pressure");

        txtSystolicBloodPressure.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblWeight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRespiratoryRate)
                            .addComponent(lblWeight1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtRespiratoryRate))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeartRate)
                    .addComponent(lblSystolicBloodPressure))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtSystolicBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(btnSendDiagnosis)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWeight1)
                    .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRespiratoryRate)
                            .addComponent(txtRespiratoryRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblWeight)
                            .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHeartRate)
                            .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSystolicBloodPressure)
                            .addComponent(txtSystolicBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)))
                .addGap(32, 32, 32)
                .addComponent(btnSendDiagnosis)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, -1, -1));

        jLabel4.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel4.setText("Nurse Work Area Panel");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void btnSendDiagnosisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendDiagnosisActionPerformed

        if(!(txtRespiratoryRate.getText().isEmpty() || txtRespiratoryRate.getText().startsWith(" ") ||
             txtHeartRate.getText().isEmpty() || txtHeartRate.getText().startsWith(" ") || 
             txtSystolicBloodPressure.getText().isEmpty() || txtSystolicBloodPressure.getText().startsWith(" ") ||   
             txtWeight.getText().isEmpty() || txtWeight.getText().startsWith(" ")  )){
       

            if(txtHeartRate.getText().trim().length()>3 ||
                    txtSystolicBloodPressure.getText().trim().length()>3 ||
                    txtRespiratoryRate.getText().trim().length()>3 
                    ){
                JOptionPane.showMessageDialog(null, "Max value of vital sign could be 3 digits");
                return;
            }
            
                    appointmentWorkRequest.setStatus("With Doctor");
                    appointmentWorkRequest.setTestResult("Ready to proceed");
                    String tStamp = String.valueOf(new Timestamp(System.currentTimeMillis()));
                    VitalSign vs =appointmentWorkRequest.getPatient().getVitalSignHistory().addVitalSign();
                    vs.setHeartRate(Float.valueOf(txtHeartRate.getText()));
                    vs.setRespiratoryRate(Float.valueOf(txtRespiratoryRate.getText()));
                    vs.setSystolicBloodPressure(Float.valueOf(txtSystolicBloodPressure.getText()));
                    vs.setWeight(Float.valueOf(txtWeight.getText()));
                    vs.setTimestamp(tStamp);
                    
                    appointmentWorkRequest.setVitalSignsCapturedViaNurse(vs);
                    txtHeartRate.setText("");
                    txtRespiratoryRate.setText("");
                    txtWeight.setText("");
                    txtSystolicBloodPressure.setText("");
                    txtPatientName.setText("");
                    
                    txtHeartRate.setEditable(false);
                    txtRespiratoryRate.setEditable(false);
                    txtSystolicBloodPressure.setEditable(false);
                    txtWeight.setEditable(false);
                    
                    
                    btnSendDiagnosis.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Ready for doctor to proceed");

                    populateTable();
                
        }
        else{
            JOptionPane.showMessageDialog(null, "Capturing VitalSign is mandatory");
        }
    }//GEN-LAST:event_btnSendDiagnosisActionPerformed

    private void workRequestJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workRequestJTableMouseClicked

        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
                           
        appointmentWorkRequest = (AppointmentWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        txtPatientName.setText(appointmentWorkRequest.getPatient().getName());
        
        if(appointmentWorkRequest.getStatus().equalsIgnoreCase("Scheduled")){
            
            txtHeartRate.setEditable(true);
            txtRespiratoryRate.setEditable(true);
            txtSystolicBloodPressure.setEditable(true);
            txtWeight.setEditable(true);
            btnSendDiagnosis.setEnabled(true);
        }
        else if(appointmentWorkRequest.getStatus().equalsIgnoreCase("With Doctor") ||
                appointmentWorkRequest.getStatus().equalsIgnoreCase("Completed") ){
                 JOptionPane.showMessageDialog(null, "Either with Doctor or completed");
                 
            txtHeartRate.setEditable(false);
            txtRespiratoryRate.setEditable(false);
            txtSystolicBloodPressure.setEditable(false);
            txtWeight.setEditable(false);
            btnSendDiagnosis.setEnabled(false);
            
        }
            
       
        
        
    }//GEN-LAST:event_workRequestJTableMouseClicked

    private void txtRespiratoryRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRespiratoryRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRespiratoryRateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSendDiagnosis;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblRespiratoryRate;
    private javax.swing.JLabel lblSystolicBloodPressure;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JLabel lblWeight1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtRespiratoryRate;
    private javax.swing.JTextField txtSystolicBloodPressure;
    private javax.swing.JTextField txtWeight;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
