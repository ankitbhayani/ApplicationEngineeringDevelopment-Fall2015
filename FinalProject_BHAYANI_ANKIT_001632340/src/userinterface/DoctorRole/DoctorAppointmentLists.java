/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.Enterprise.Enterprise;
import Business.IndividualUser.Patient;
import Business.Organization.DoctorOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Utils.MyAlphanumericVerifier;
import Business.WorkQueue.AppointmentWorkRequest;
import Business.WorkQueue.GetDiagnosisWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import UserInterface.DoctorRole.MedicalAdviceJPanel;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class DoctorAppointmentLists extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private DoctorOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private AppointmentWorkRequest req;
    private Patient patient;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public DoctorAppointmentLists(JPanel userProcessContainer, UserAccount account, DoctorOrganization organization, Enterprise enterprise) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        valueLabel.setText(enterprise.getName());
        btnSendDiagnosis.setEnabled(false);
        btnXRayNeeded.setEnabled(false);
        populateRequestTable();
        MyAlphanumericVerifier myStringVerifier = new MyAlphanumericVerifier();
        txtResolution.setInputVerifier(myStringVerifier);
        txtRequestTest.setInputVerifier(myStringVerifier);
        
    }
    
    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(request instanceof AppointmentWorkRequest){
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = ((AppointmentWorkRequest) request).getAppointmentDateTime();
                row[2] = ((AppointmentWorkRequest) request).getPatient().getName();
                row[3] = request.getStatus();
                String result = ((AppointmentWorkRequest) request).getTestResult();
                row[4] = result == null ? "With Nurse" : result;

                model.addRow(row);
            }
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshTestJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtPatientSymptoms = new javax.swing.JTextField();
        txtPastMedicines = new javax.swing.JTextField();
        txtSystolicBloodPressure = new javax.swing.JTextField();
        lblRespiratoryRate1 = new javax.swing.JLabel();
        lblWeight = new javax.swing.JLabel();
        txtRespiratoryRate = new javax.swing.JTextField();
        lblSystolicBloodPressure = new javax.swing.JLabel();
        btnSendDiagnosis = new javax.swing.JButton();
        lblHeartRate1 = new javax.swing.JLabel();
        lblHeartRate = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        lblRespiratoryRate = new javax.swing.JLabel();
        txtHeartRate = new javax.swing.JTextField();
        lblSystolicBloodPressure1 = new javax.swing.JLabel();
        txtMajorDisease = new javax.swing.JTextField();
        lblWeight1 = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JTextField();
        lblSystolicBloodPressure2 = new javax.swing.JLabel();
        txtResolution = new javax.swing.JTextField();
        txtVitalSignNoted = new javax.swing.JTextField();
        lblSystolicBloodPressure3 = new javax.swing.JLabel();
        btnXRayNeeded = new javax.swing.JButton();
        txtRequestTest = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        workLabRequestJTable = new javax.swing.JTable();
        lblReqStatus = new javax.swing.JLabel();

        setBackground(new java.awt.Color(242, 246, 246));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Message", "AppointmentDateAndTime", "Patient", "Status", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workRequestJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        backJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/PatientRole/backButton.png"))); // NOI18N
        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        enterpriseLabel.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");

        valueLabel.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        valueLabel.setText("<value>");

        jPanel2.setBackground(new java.awt.Color(229, 230, 212));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Suggest Resolution", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 16))); // NOI18N

        txtPatientSymptoms.setEditable(false);
        txtPatientSymptoms.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtPatientSymptoms.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPatientSymptomsKeyTyped(evt);
            }
        });

        txtPastMedicines.setEditable(false);
        txtPastMedicines.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtPastMedicines.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPastMedicinesKeyTyped(evt);
            }
        });

        txtSystolicBloodPressure.setEditable(false);
        txtSystolicBloodPressure.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblRespiratoryRate1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblRespiratoryRate1.setText("Patient Symptoms");

        lblWeight.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblWeight.setText("Weight (in Pounds)");

        txtRespiratoryRate.setEditable(false);
        txtRespiratoryRate.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblSystolicBloodPressure.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblSystolicBloodPressure.setText("Blood Pressure");

        btnSendDiagnosis.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnSendDiagnosis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/Images/1449760285_Global_manager.png"))); // NOI18N
        btnSendDiagnosis.setText("Diagnose");
        btnSendDiagnosis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendDiagnosisActionPerformed(evt);
            }
        });

        lblHeartRate1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblHeartRate1.setText("Past Medications");

        lblHeartRate.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblHeartRate.setText("Heart Rate");

        txtWeight.setEditable(false);
        txtWeight.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblRespiratoryRate.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblRespiratoryRate.setText("Respiratory Rate");

        txtHeartRate.setEditable(false);
        txtHeartRate.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblSystolicBloodPressure1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblSystolicBloodPressure1.setText("Major Disease");

        txtMajorDisease.setEditable(false);
        txtMajorDisease.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblWeight1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblWeight1.setText("Patient Name");

        txtPatientName.setEditable(false);
        txtPatientName.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblSystolicBloodPressure2.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblSystolicBloodPressure2.setText("Resolution");

        txtResolution.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        txtVitalSignNoted.setEditable(false);
        txtVitalSignNoted.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblSystolicBloodPressure3.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lblSystolicBloodPressure3.setText("Vital Sign TimeStamp");

        btnXRayNeeded.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnXRayNeeded.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/PatientRole/feedBackButton.png"))); // NOI18N
        btnXRayNeeded.setText("Request Test");
        btnXRayNeeded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXRayNeededActionPerformed(evt);
            }
        });

        txtRequestTest.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtRequestTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRequestTestActionPerformed(evt);
            }
        });

        workLabRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workLabRequestJTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(lblRespiratoryRate)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtRespiratoryRate))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(lblWeight1)
                                        .addGap(34, 34, 34)
                                        .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(lblWeight)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(35, 35, 35)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblHeartRate)
                                            .addComponent(lblSystolicBloodPressure))
                                        .addGap(15, 15, 15)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtHeartRate, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                            .addComponent(txtSystolicBloodPressure)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(lblSystolicBloodPressure1)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtMajorDisease, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblSystolicBloodPressure2)
                                .addGap(48, 48, 48)
                                .addComponent(txtResolution, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(349, 349, 349)
                        .addComponent(btnSendDiagnosis)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRespiratoryRate1)
                            .addComponent(lblSystolicBloodPressure3))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtPatientSymptoms, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(lblHeartRate1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPastMedicines, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtVitalSignNoted, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(txtRequestTest, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnXRayNeeded, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWeight1)
                    .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSystolicBloodPressure1)
                    .addComponent(txtMajorDisease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSystolicBloodPressure3)
                    .addComponent(txtVitalSignNoted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRespiratoryRate)
                            .addComponent(txtRespiratoryRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHeartRate)
                            .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRespiratoryRate1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblWeight)
                            .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSystolicBloodPressure)
                            .addComponent(txtSystolicBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblHeartRate1)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPastMedicines, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPatientSymptoms, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSystolicBloodPressure2)
                            .addComponent(txtResolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSendDiagnosis)
                        .addGap(20, 20, 20))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRequestTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnXRayNeeded))
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(81, Short.MAX_VALUE))))
        );

        lblReqStatus.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        lblReqStatus.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(refreshTestJButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(380, 380, 380)
                        .addComponent(lblReqStatus))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(412, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(refreshTestJButton)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(lblReqStatus)))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backJButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateRequestTable();
        
    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void txtPatientSymptomsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientSymptomsKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientSymptomsKeyTyped

    private void txtPastMedicinesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPastMedicinesKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPastMedicinesKeyTyped

    private void btnSendDiagnosisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendDiagnosisActionPerformed

        if(!(txtResolution.getText().isEmpty() || txtPastMedicines.getText().startsWith(" "))){

                    req.setTestResult(txtResolution.getText());
                    req.setStatus("Completed");
                    
                    
                    txtHeartRate.setText("");
                    txtRespiratoryRate.setText("");
                    txtWeight.setText("");
                    txtSystolicBloodPressure.setText("");
                    txtMajorDisease.setText("");
                    txtPastMedicines.setText("");
                    txtPatientSymptoms.setText("");
                    txtPatientName.setText("");
                    txtResolution.setText("");

                    btnSendDiagnosis.setEnabled(false);
                    
                    populateRequestTable();
                    
        }
        else{
            JOptionPane.showMessageDialog(null, "Providing resolution is mandatory");
        }

    }//GEN-LAST:event_btnSendDiagnosisActionPerformed

    private void workRequestJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workRequestJTableMouseClicked
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        lblReqStatus.setText("");
        req = (AppointmentWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        patient =req.getPatient();
        //JOptionPane.showMessageDialog(null, req.getTestResult());
        if(!req.getStatus().equalsIgnoreCase("Scheduled")){
                txtHeartRate.setText(String.valueOf(req.getVitalSignsCapturedViaNurse().getHeartRate()));
                txtRespiratoryRate.setText(String.valueOf(req.getVitalSignsCapturedViaNurse().getRespiratoryRate()));
                txtWeight.setText(String.valueOf(req.getVitalSignsCapturedViaNurse().getWeight()));
                txtSystolicBloodPressure.setText(String.valueOf(req.getVitalSignsCapturedViaNurse().getSystolicBloodPressure()));
                txtMajorDisease.setText(req.getPatient().getPatientChronicDisease());
                txtPastMedicines.setText(req.getVitalSignsCapturedViaNurse().getPastMeds());
                txtPatientSymptoms.setText(req.getVitalSignsCapturedViaNurse().getSymptoms());
                txtPatientName.setText(req.getPatient().getName());
                txtVitalSignNoted.setText(req.getVitalSignsCapturedViaNurse().getTimestamp());
                populateLabTestRequestTable(patient);

                if(req.getStatus().equalsIgnoreCase("Completed")){
                    btnSendDiagnosis.setEnabled(false);
                    txtResolution.setText(req.getTestResult());

                }
                else{btnSendDiagnosis.setEnabled(true);
                    btnXRayNeeded.setEnabled(true);
                }
        }
        else{
            lblReqStatus.setText("Currently with Nurse for taking the VitalSign");
        }
        
    }//GEN-LAST:event_workRequestJTableMouseClicked

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        //Component[] componentArray = userProcessContainer.getComponents();
        //Component component = componentArray[componentArray.length - 1];
        //DoctorMedicalAdviceJPanel dwjp = (DoctorMedicalAdviceJPanel) component;
        //dwjp.populateRequestTable();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_backJButtonActionPerformed

    private void btnXRayNeededActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXRayNeededActionPerformed
        
        if(!txtRequestTest.getText().isEmpty()){
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setMessage(txtRequestTest.getText());
            request.setSender(userAccount);
            request.setStatus("Sent");
            request.setPatient(patient);

            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                if (organization instanceof LabOrganization){
                    org = organization;
                    break;
                }
            }
            if (org!=null){
                org.getWorkQueue().getWorkRequestList().add(request);
                userAccount.getWorkQueue().getWorkRequestList().add(request);
                populateLabTestRequestTable(patient);
            }
        }
        else{JOptionPane.showMessageDialog(null, "Please write some request in the text box");}
    }//GEN-LAST:event_btnXRayNeededActionPerformed

    public void populateLabTestRequestTable(Patient p){
        DefaultTableModel model = (DefaultTableModel) workLabRequestJTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(request instanceof LabTestWorkRequest){
                if(((LabTestWorkRequest)request).getPatient().getName().equals(p.getName())){
                    //JOptionPane.showMessageDialog(null, "Pinside Patient found");
                    Object[] row = new Object[4];

                    row[0] = request.getMessage();
                    row[1] = request.getReceiver();
                    row[2] = request.getStatus();
                    String result = ((LabTestWorkRequest) request).getTestResult();
                    row[3] = result == null ? "Waiting" : result;

                    model.addRow(row);
                }
            }
        }
    }
    
    private void txtRequestTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRequestTestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRequestTestActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnSendDiagnosis;
    private javax.swing.JButton btnXRayNeeded;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblHeartRate1;
    private javax.swing.JLabel lblReqStatus;
    private javax.swing.JLabel lblRespiratoryRate;
    private javax.swing.JLabel lblRespiratoryRate1;
    private javax.swing.JLabel lblSystolicBloodPressure;
    private javax.swing.JLabel lblSystolicBloodPressure1;
    private javax.swing.JLabel lblSystolicBloodPressure2;
    private javax.swing.JLabel lblSystolicBloodPressure3;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JLabel lblWeight1;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtMajorDisease;
    private javax.swing.JTextField txtPastMedicines;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtPatientSymptoms;
    private javax.swing.JTextField txtRequestTest;
    private javax.swing.JTextField txtResolution;
    private javax.swing.JTextField txtRespiratoryRate;
    private javax.swing.JTextField txtSystolicBloodPressure;
    private javax.swing.JTextField txtVitalSignNoted;
    private javax.swing.JTextField txtWeight;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable workLabRequestJTable;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
