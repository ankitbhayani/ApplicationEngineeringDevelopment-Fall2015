/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ReceptionistRole;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.DonorOrganization;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Organization.ReceptionistOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class ReceptionistWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private ReceptionistOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    //private Employee nurse;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public ReceptionistWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, ReceptionistOrganization organization, Enterprise enterprise) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        valueLabel.setText(enterprise.getName());
        populateRequestTable();
        populateDonorTable();
        populateNurseCombo();
    }
    
    public void populateNurseCombo(){
        
        DefaultTableModel model = (DefaultTableModel) NurseTable.getModel();
        model.setRowCount(0);
        
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof NurseOrganization){
                org = organization;
                break;
            }
        }
        
        int no=0;
        for (Employee nurse : org.getEmployeeDirectory().getEmployeeList()){
             for(UserAccount ua : org.getUserAccountDirectory().getUserAccountList()){
                if(ua.getEmployee().getName().equals(nurse.getName())){
                    no=ua.getWorkQueue().getWorkRequestList().size();
                    break;
                }
            }
            
            Object[] row = new Object[2];
            row[0] = nurse;
            row[1] = no;
            model.addRow(row);
        }
        

    }
    
    
    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[5];
            row[0] = request.getMessage();
            row[1] = ((LabTestWorkRequest) request).getDonor();
            row[2] = request.getReceiver();
            row[3] = request.getStatus();
            String result = ((LabTestWorkRequest) request).getTestResult();
            row[4] = result == null ? "Waiting" : result;
            
            model.addRow(row);
        }
    }
    
    public void populateDonorTable(){
        DefaultTableModel model = (DefaultTableModel) DonorTable.getModel();
        
        model.setRowCount(0);        
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof DonorOrganization){
                org = organization;
                break;
            }
        }
                
        for (Employee donor : org.getEmployeeDirectory().getEmployeeList()){
            Object[] row = new Object[2];
            row[0] = donor;
            //row[1] = donor.getReceiver();
            model.addRow(row);
        }
    }
    

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        refreshTestJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DonorTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        NurseTable = new javax.swing.JTable();
        txtSelectedDonor = new javax.swing.JTextField();
        txtSelectedNurse = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDonorSrch = new javax.swing.JTextField();
        txtNurseSrch = new javax.swing.JTextField();
        btnDonorSrch = new javax.swing.JButton();
        btnNurseSrch = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Message", "Donor", "Nurse", "Status", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        requestTestJButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        requestTestJButton.setText("Request Test");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });

        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");

        valueLabel.setText("<value>");

        DonorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Donor Name"
            }
        ));
        DonorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DonorTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(DonorTable);

        NurseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nurse Name", "Request Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        NurseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NurseTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(NurseTable);

        txtSelectedDonor.setEditable(false);
        txtSelectedDonor.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        txtSelectedNurse.setEditable(false);
        txtSelectedNurse.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtSelectedNurse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSelectedNurseActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel1.setText("Selected Donor");

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel2.setText("Selected Nurse");

        txtNurseSrch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNurseSrchActionPerformed(evt);
            }
        });

        btnDonorSrch.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnDonorSrch.setText("Search");
        btnDonorSrch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDonorSrchActionPerformed(evt);
            }
        });

        btnNurseSrch.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnNurseSrch.setText("Search");
        btnNurseSrch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNurseSrchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel3.setText("Donor Search ");

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel4.setText("Nurse Search");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtDonorSrch, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(4, 4, 4)
                                                .addComponent(btnDonorSrch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(requestTestJButton))
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel1)
                                                    .addComponent(jLabel2))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtSelectedNurse, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                                    .addComponent(txtSelectedDonor)))))
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(txtNurseSrch)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnNurseSrch, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(refreshTestJButton)))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDonorSrch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNurseSrch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDonorSrch)
                    .addComponent(btnNurseSrch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSelectedDonor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtSelectedNurse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(requestTestJButton))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshTestJButton)
                .addContainerGap(52, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed
        
        if(!txtSelectedDonor.getText().isEmpty() && !txtSelectedNurse.getText().isEmpty()){
                LabTestWorkRequest request = new LabTestWorkRequest();

                request.setSender(userAccount);
                request.setMessage("Donation");
                request.setStatus("Sent");
                
                //----------------------Finding useraccount of Nurse
                Organization org = null;
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if (organization instanceof NurseOrganization){
                        org = organization;
                        break;
                    }
                }

                UserAccount nurseUa=null;
                for(UserAccount ua : org.getUserAccountDirectory().getUserAccountList()){
                    if(ua.getEmployee().getName().equals(txtSelectedNurse.getText())){
                        nurseUa = ua;
                        //JOptionPane.showMessageDialog(null, ua.getUsername());
                    }
                }
                //---------------------finding donor info
                Organization o = null;
                for (Organization or : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if (or instanceof DonorOrganization){
                        o = or;
                        break;
                    }
                }

                Employee donor=null;
                for(Employee d : o.getEmployeeDirectory().getEmployeeList()){
                    if(d.getName().equals(txtSelectedDonor.getText())){
                        donor = d;
                        request.setDonor(donor);
                        //JOptionPane.showMessageDialog(null, donor.getName());
                    }
                }

                //---------------------assigning the values
                if (org!=null && nurseUa!=null){
                    //org.getWorkQueue().getWorkRequestList().add(request);
                    request.setReceiver(nurseUa);
                    userAccount.getWorkQueue().getWorkRequestList().add(request);
                    nurseUa.getWorkQueue().getWorkRequestList().add(request);
                    
                }
            populateRequestTable();
            populateNurseCombo();
            
        }
        else{
                JOptionPane.showMessageDialog(null, "One of the fields are empty, Please select a Donor and a Nurse");
        }
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateRequestTable();
        
    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void txtSelectedNurseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSelectedNurseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSelectedNurseActionPerformed

    private void DonorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DonorTableMouseClicked
        
        try{
            
            int selectedRow = DonorTable.getSelectedRow();
            Employee donor = (Employee)DonorTable.getValueAt(selectedRow, 0);
            txtSelectedDonor.setText(String.valueOf(donor.getName()));
            populateDonorTable();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_DonorTableMouseClicked

    private void NurseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NurseTableMouseClicked
           
        try{
            
            int selectedRow = NurseTable.getSelectedRow();
            Employee nurse = (Employee)NurseTable.getValueAt(selectedRow, 0);
            txtSelectedNurse.setText(String.valueOf(nurse.getName()));
            populateNurseCombo();
        
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_NurseTableMouseClicked

    private void txtNurseSrchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNurseSrchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNurseSrchActionPerformed

    private void btnDonorSrchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDonorSrchActionPerformed

        if(!txtDonorSrch.getText().isEmpty()){
            DefaultTableModel model = (DefaultTableModel) DonorTable.getModel();
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                if (organization instanceof DonorOrganization){
                    org = organization;
                    break;
                }
            }

            Employee don=null;
            for (Employee donor : org.getEmployeeDirectory().getEmployeeList()){
                    if(donor.getName().equalsIgnoreCase(txtDonorSrch.getText())){
                        //JOptionPane.showMessageDialog(null, "Donor found");
                        don= donor;
                    }
                    
                }
            
            if(don==null){
                        JOptionPane.showMessageDialog(null, "Donor not found, please try again");
                        
            }
            
            if(don!=null){
                model.setRowCount(0); 
                Object[] row = new Object[2];
                row[0] = don;
                //row[1] = donor.getReceiver();
                model.addRow(row);
            }
           
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Please input a donor name to search");
        }
            
        
    }//GEN-LAST:event_btnDonorSrchActionPerformed

    private void btnNurseSrchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNurseSrchActionPerformed

            if(!txtNurseSrch.getText().isEmpty()){
            DefaultTableModel model = (DefaultTableModel) NurseTable.getModel();
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                if (organization instanceof NurseOrganization){
                    org = organization;
                    break;
                }
            }

            Employee nur=null;
            int no=0;
            for (Employee nurse : org.getEmployeeDirectory().getEmployeeList()){
                    if(nurse.getName().equalsIgnoreCase(txtNurseSrch.getText())){
                        //JOptionPane.showMessageDialog(null, "Nurse found");
                        nur= nurse;
                        for(UserAccount ua : org.getUserAccountDirectory().getUserAccountList()){
                            if(ua.getEmployee().getName().equals(nurse.getName())){
                                no=ua.getWorkQueue().getWorkRequestList().size();
                                break;
                            }
                        }
                    }
                    
                }
            
            if(nur==null){
                        JOptionPane.showMessageDialog(null, "Nurse not found, please try again");
                        
            }
            
            if(nur!=null){
                model.setRowCount(0); 
                Object[] row = new Object[2];
                row[0] = nur;
                row[1] = no;
                //row[1] = donor.getReceiver();
                model.addRow(row);
            }
           
          
        }
        else{
            JOptionPane.showMessageDialog(null, "Please input a nurse name to search");
        }
        
    }//GEN-LAST:event_btnNurseSrchActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DonorTable;
    private javax.swing.JTable NurseTable;
    private javax.swing.JButton btnDonorSrch;
    private javax.swing.JButton btnNurseSrch;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JTextField txtDonorSrch;
    private javax.swing.JTextField txtNurseSrch;
    private javax.swing.JTextField txtSelectedDonor;
    private javax.swing.JTextField txtSelectedNurse;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
