/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Admin;

import Business.Logic.Business;
import Business.Logic.Customer;
import Business.Logic.Order;
import Business.Logic.OrderItem;
import Business.Logic.Product;
import Business.Logic.ProductCatalog;
import Business.Logic.SalesPerson;
import Business.Logic.SalesPersonDirectory;
import java.awt.CardLayout;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ankit Bhayani
 */
public class ViewBusinessAnalytics extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private Business business;
    private String Flag="";
    /**
     * Creates new form ViewBusinessAnalytics
     */
    public ViewBusinessAnalytics(JPanel userProcessContainer,Business business) {
        initComponents();
        this.business=business;
        this.userProcessContainer=userProcessContainer;
        populateComboOperations();            
        lblActivity.setText("Administrator Business Intelligence Analytics");
    }

    public void populateComboOperations(){
        cmbSalesPersonOperations.removeAllItems();
        cmbSalesPersonOperations.addItem("Total commission paid for each sales person");
        cmbSalesPersonOperations.addItem("Top 3 sales persons by sales volume");
        
        cmbProductOperations.removeAllItems();
        cmbProductOperations.addItem("For each sales person, Products sold above target price");
        cmbProductOperations.addItem("For each sales person, Products sold below target price");

        
        cmbCustomerOperations.removeAllItems();
        cmbCustomerOperations.addItem("Best customer by sales volume");
        cmbCustomerOperations.addItem("Most popular product by sales volume");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbSalesPersonOperations = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSalesPersonData = new javax.swing.JTable();
        btnGoSales = new javax.swing.JButton();
        lblActivity4 = new javax.swing.JLabel();
        lblActivity = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        cmbProductOperations = new javax.swing.JComboBox();
        btnGoProduct = new javax.swing.JButton();
        cmbCustomerOperations = new javax.swing.JComboBox();
        btnGoCustomer = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCustomerData = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblSalesPerson = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();

        cmbSalesPersonOperations.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cmbSalesPersonOperations.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tblSalesPersonData.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        tblSalesPersonData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sales Person", "Total Amount", "Total Comission"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblSalesPersonData);
        if (tblSalesPersonData.getColumnModel().getColumnCount() > 0) {
            tblSalesPersonData.getColumnModel().getColumn(0).setHeaderValue("Sales Person");
            tblSalesPersonData.getColumnModel().getColumn(1).setHeaderValue("Target Price");
        }

        btnGoSales.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnGoSales.setText("Go");
        btnGoSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoSalesActionPerformed(evt);
            }
        });

        lblActivity4.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblActivity4.setText("Activity: ");

        lblActivity.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        lblActivity.setForeground(new java.awt.Color(255, 0, 0));
        lblActivity.setText("Activity");

        btnBack.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        cmbProductOperations.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cmbProductOperations.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnGoProduct.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnGoProduct.setText("Go");
        btnGoProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoProductActionPerformed(evt);
            }
        });

        cmbCustomerOperations.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cmbCustomerOperations.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnGoCustomer.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnGoCustomer.setText("Go");
        btnGoCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoCustomerActionPerformed(evt);
            }
        });

        tblCustomerData.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        tblCustomerData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Name", "Sales Volume"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblCustomerData);
        if (tblCustomerData.getColumnModel().getColumnCount() > 0) {
            tblCustomerData.getColumnModel().getColumn(0).setHeaderValue("Sales Person");
            tblCustomerData.getColumnModel().getColumn(1).setHeaderValue("Target Price");
        }

        tblSalesPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Sales Person"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSalesPerson.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSalesPersonMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblSalesPerson);

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel1.setText("Product List");

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane5.setViewportView(jTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(lblActivity4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblActivity))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(cmbSalesPersonOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGoSales)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbProductOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnGoProduct)
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbCustomerOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnGoCustomer))
                                    .addComponent(btnBack))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(130, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblActivity)
                    .addComponent(lblActivity4))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cmbSalesPersonOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnGoSales)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbProductOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnGoProduct))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbCustomerOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGoCustomer))
                        .addGap(86, 86, 86)
                        .addComponent(btnBack))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(121, 121, 121))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGoSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoSalesActionPerformed

       String operation = String.valueOf(cmbSalesPersonOperations.getSelectedItem());
       
       if(operation.equals("Top 3 sales persons by sales volume")){
                for(SalesPerson sp: business.getEmployeeDirectory().getemployeeList()){
                       //JOptionPane.showMessageDialog(null,sp.getSalesVolume());
                       sp.setSalesVolume((int)sp.getSalesVolume());
                       sp.setSalesComission(sp.getSalesComission());
                }
              SalesPersonDirectory salesPersonDirectory = business.getEmployeeDirectory();

              try {
                  Collections.sort(salesPersonDirectory.getemployeeList());//{
                   } catch (Exception e) {
              }

                DefaultTableModel dtm = (DefaultTableModel) tblSalesPersonData.getModel();
                dtm.setRowCount(0);
                int i=1;
                for(SalesPerson sp: business.getEmployeeDirectory().getemployeeList()){
                        if(i<4){
                            Object row[] = new Object[5];
                            row[0]=sp;
                            row[1]=sp.getSalesVolume();
                            row[2]=sp.getSalesComission();
                            dtm.addRow(row);
                            ++i;
                        }
                }
         
       }
       else if(operation.equals("Total commission paid for each sales person")){
           //JOptionPane.showMessageDialog(null,"nOT tOP3");
                for(SalesPerson sp: business.getEmployeeDirectory().getemployeeList()){
                       //JOptionPane.showMessageDialog(null,sp.getSalesVolume());
                       sp.setSalesVolume((int)sp.getSalesVolume());
                       sp.setSalesComission(sp.getSalesComission());
                }
           
                DefaultTableModel dtm = (DefaultTableModel) tblSalesPersonData.getModel();
                dtm.setRowCount(0);
                
                for(SalesPerson sp: business.getEmployeeDirectory().getemployeeList()){
                            Object row[] = new Object[5];
                            row[0]=sp;
                            row[1]=sp.getSalesVolume();
                            row[2]=sp.getSalesComission();
                            dtm.addRow(row);
                }   
           
       }

       
           
    }//GEN-LAST:event_btnGoSalesActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnGoProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoProductActionPerformed
            
            String operation = String.valueOf(cmbProductOperations.getSelectedItem());    
            if(operation.equals("For each sales person, Products sold above target price")){
                
                Flag="Above";
                DefaultTableModel dtm = (DefaultTableModel) tblSalesPerson.getModel();
                dtm.setRowCount(0);
                
                for(SalesPerson sp: business.getEmployeeDirectory().getemployeeList()){
                            Object row[] = new Object[1];
                            row[0]=sp;
                            dtm.addRow(row);
                }  
            }    
            else if(operation.equals("For each sales person, Products sold below target price")){
                
                Flag="Below";
                DefaultTableModel dtm = (DefaultTableModel) tblSalesPerson.getModel();
                dtm.setRowCount(0);
                
                for(SalesPerson sp: business.getEmployeeDirectory().getemployeeList()){
                            Object row[] = new Object[1];
                            row[0]=sp;
                            dtm.addRow(row);
                }  
            }
        

        
    }//GEN-LAST:event_btnGoProductActionPerformed

    private void btnGoCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoCustomerActionPerformed
      
           String operation = String.valueOf(cmbCustomerOperations.getSelectedItem());    
            if(operation.equals("Most popular product by sales volume")){
                 //JOptionPane.showMessageDialog(null,"nOT tOP3");
                double total=0;
                
                for(Product p: business.getXeroxProductCatalog().getProductcatalog()){
                     //JOptionPane.showMessageDialog(null,p.getProdName());
                    for(Order o: business.getMasterOrderCatalog().getOrders()){
                        for(OrderItem oi:o.getOrderItems()){
                        
                            if(oi.getProduct().getProdName().equals(p.getProdName())){
                                //JOptionPane.showMessageDialog(null,"Inside oinull");
                                total=total+oi.getQuantity()*oi.getSalesPrice();
                            }
                       }
                    }
                    //JOptionPane.showMessageDialog(null,total);
                    p.setSalesvol(total);
                    total=0;
                }
           
                DefaultTableModel dtm = (DefaultTableModel) tblCustomerData.getModel();
                dtm.setRowCount(0);
                
                for(Product p: business.getXeroxProductCatalog().getProductcatalog()){
                            Object row[] = new Object[2];
                            row[0]=p;
                            row[1]=p.getSalesvol();
                            //row[2]=p.getSalesvol();
                            dtm.addRow(row);
                }  
           
            }
        
            else if(operation.equals("Best customer by sales volume")){
                 //JOptionPane.showMessageDialog(null,"nOT tOP3");
                double total=0;
                
                for(Customer c: business.getCustomerDirectory().getCustomerList()){
                     //JOptionPane.showMessageDialog(null,c.getCustomerName());
                    for(Order o: c.getCustomerOrderList().getOrders()){

                        total=total+o.getTotalOrderValue();
                    }
                    //JOptionPane.showMessageDialog(null,total);
                    c.setSalesvol(total);
                    total=0;
                }
           
                DefaultTableModel dtm = (DefaultTableModel) tblCustomerData.getModel();
                dtm.setRowCount(0);
                
                for(Customer c: business.getCustomerDirectory().getCustomerList()){
                            Object row[] = new Object[2];
                            row[0]=c;
                            row[1]=c.getSalesvol();
                            dtm.addRow(row);
                }  
           
            }
        
    }//GEN-LAST:event_btnGoCustomerActionPerformed

    private void tblSalesPersonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSalesPersonMouseClicked
            
             
            if(Flag.equals("Above")){
                 
                double total=0;
                
                int selectedRow = tblSalesPerson.getSelectedRow();
                SalesPerson sp = (SalesPerson)tblSalesPerson.getValueAt(selectedRow, 0);
                 JOptionPane.showMessageDialog(null,sp.getFirstName());
                // ProductCatalog pc = new ProductCatalog();
                 //private String[] prodNamelist =  new String[20]; 
                 String[] prodNamelist = new String[20];
                 
                  for(int j=0;j<prodNamelist.length;j++){
                            prodNamelist[j]="";
                    }
                 
                 
                 int i=0;
                 
                    for(Order o: sp.getSalesPersonOrderList().getOrders()){
                        for(OrderItem oi:o.getOrderItems()){
                            if(oi.getSalesPrice()>oi.getProduct().getTargetPrice()){
                                //JOptionPane.showMessageDialog(null,"Insidle ABOVE");
                                //JOptionPane.showMessageDialog(null,oi.getProduct().getProdName());
                                //Product p=pc.addProduct();
                                //p = oi.getProduct();
                                prodNamelist[i]= oi.getProduct().getProdName();
                                //JOptionPane.showMessageDialog(null,prodNamelist[i]);
                                i++;
                            }
                       }
                    }
                    
                    
                //JOptionPane.showMessageDialog(null,prodNamelist.length);  
                
                
                
                //DefaultTableModel dtm = (DefaultTableModel) tblProductData.getModel();
                //dtm.setRowCount(0);
                    String sample="";
                
                for(i=0;i<prodNamelist.length;i++){
                            
                            if(!prodNamelist[i].isEmpty()){
                                 sample= sample.concat(" "+prodNamelist[i]);
                                jTextArea.setText(sample);
                            
                            }
                }
                 
 
            }
            
              if(Flag.equals("Below")){
                 
                double total=0;
                
                int selectedRow = tblSalesPerson.getSelectedRow();
                SalesPerson sp = (SalesPerson)tblSalesPerson.getValueAt(selectedRow, 0);
                 JOptionPane.showMessageDialog(null,sp.getFirstName());
                // ProductCatalog pc = new ProductCatalog();
                 //private String[] prodNamelist =  new String[20]; 
                 String[] prodNamelist = new String[20];
                 
                  for(int j=0;j<prodNamelist.length;j++){
                            prodNamelist[j]="";
                    }
                 
                 
                 int i=0;
                 
                    for(Order o: sp.getSalesPersonOrderList().getOrders()){
                        for(OrderItem oi:o.getOrderItems()){
                            if(oi.getSalesPrice()<oi.getProduct().getTargetPrice()){
                                //JOptionPane.showMessageDialog(null,"Insidle Below");
                                //JOptionPane.showMessageDialog(null,oi.getProduct().getProdName());
                                //Product p=pc.addProduct();
                                //p = oi.getProduct();
                                prodNamelist[i]= oi.getProduct().getProdName();
                                //JOptionPane.showMessageDialog(null,prodNamelist[i]);
                                i++;
                            }
                       }
                    }
                    
                    
                //JOptionPane.showMessageDialog(null,prodNamelist.length);  
                
                
                
                //DefaultTableModel dtm = (DefaultTableModel) tblProductData.getModel();
                //dtm.setRowCount(0);
                    String sample="";
                
                for(i=0;i<prodNamelist.length;i++){
                            
                            if(!prodNamelist[i].isEmpty()){
                                 sample= sample.concat(" "+prodNamelist[i]);
                                jTextArea.setText(sample);
                            
                            }
                }
                 
 
            }
     
        
    }//GEN-LAST:event_tblSalesPersonMouseClicked

        /*Comparator for sorting the list by roll no*/
    public static Comparator<SalesPerson> SalesVol = new Comparator<SalesPerson>() {

	public int compare(SalesPerson s1, SalesPerson s2) {

	   double vol1 = s1.getSalesVolume();
	   double vol2 = s2.getSalesVolume();

	   /*For ascending order*/
	   //return rollno1-rollno2;

	   /*For descending order*/
	   return (int) (vol2-vol1);
   }};

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnGoCustomer;
    private javax.swing.JButton btnGoProduct;
    private javax.swing.JButton btnGoSales;
    private javax.swing.JComboBox cmbCustomerOperations;
    private javax.swing.JComboBox cmbProductOperations;
    private javax.swing.JComboBox cmbSalesPersonOperations;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JLabel lblActivity;
    private javax.swing.JLabel lblActivity4;
    private javax.swing.JTable tblCustomerData;
    private javax.swing.JTable tblSalesPerson;
    private javax.swing.JTable tblSalesPersonData;
    // End of variables declaration//GEN-END:variables
}
