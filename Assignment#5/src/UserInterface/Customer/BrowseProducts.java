/*
 * BrowseProducts.java
 *
 * Created on October 10, 2008, 9:10 AM
 */
package UserInterface.Customer;

import Business.Logic.Business;
import Business.Logic.MasterOrderCatalog;
import Business.Logic.Order;
import Business.Logic.OrderItem;
import Business.Logic.Product;
import Business.Logic.Supplier;
import Business.Logic.SupplierDirectory;
import UserInterface.Supplier.ViewProductDetailJPanel;
import com.oracle.jrockit.jfr.Producer;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Rushabh
 */
public class BrowseProducts extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private Business business;
    private SupplierDirectory supplierDirectory;
    private MasterOrderCatalog masterOrderCatalog;
    private Order order;
    private boolean isCheckedOut = false;
    /** Creates new form BrowseProducts */
    public BrowseProducts(JPanel userProcessContainer,Business business) {
        initComponents();
        this.business=business;
        this.userProcessContainer= userProcessContainer;
        supplierDirectory=business.getSupplierDirectory();
        masterOrderCatalog=business.getMasterOrderCatalog();
        populateSupplierComboBox();
    }
    
    public void populateSupplierComboBox(){
        suppComboBox1.removeAllItems();
        
        for(Supplier supplier:supplierDirectory.getSupplierlist()){
            suppComboBox1.addItem(supplier);
        }
        populateProductTable();
        
        if(!isCheckedOut){
            order = new Order();
        }    
        
    }

    public void populateProductTable(){
        DefaultTableModel dtm = (DefaultTableModel) productTable.getModel();
        Supplier supplier = (Supplier)suppComboBox1.getSelectedItem();
        dtm.setRowCount(0);
        
        if(supplier!=null){
            for(Product product: supplier.getProductCatalog().getProductcatalog()){
                Object row[] = new Object[4];
                row[0]=product;
                row[1]=product.getModelNumber();
                row[2]=product.getPrice();
                row[3]=product.getAvail();
                dtm.addRow(row);
            }
        }
    }
    
    
    public void refreshTableForSearch(String prodName){
        int rowCount = productTable.getRowCount();
        DefaultTableModel dtm = (DefaultTableModel)productTable.getModel();
        for(int i=rowCount-1; i>=0;i--){
            dtm.removeRow(i);
        }
        
        for(Supplier supplier: supplierDirectory.getSupplierlist()){
            for(Product product: supplier.getProductCatalog().getProductcatalog()){
                if(product.getProdName().equals(prodName)){
                    Object row[] = new Object[4];
                    row[0]=product;
                    row[1]=product.getModelNumber();
                    row[2]=product.getPrice();
                    row[3]=product.getAvail();
                    dtm.addRow(row);
                }
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        suppComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        viewProdjButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        btnSearchProduct = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnViewOrderItem = new javax.swing.JButton();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        txtSearchKeyWord = new javax.swing.JTextField();
        txtNewQuantity = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(750, 511));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        productTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Product Id", "Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 590, 100));

        suppComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppComboBox1ActionPerformed(evt);
            }
        });
        add(suppComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 250, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Supplier");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 110, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Supplier Product Catalog");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 240, -1));

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 590, 90, -1));

        viewProdjButton2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        viewProdjButton2.setText("View Product Detail");
        viewProdjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProdjButton2ActionPerformed(evt);
            }
        });
        add(viewProdjButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 340, 160, -1));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Vijaya", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 0, 0));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Customer/bestbuy.gif"))); // NOI18N
        jLabel4.setText("Welcome To Please Buy !");
        jLabel4.setIconTextGap(7);
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, -1, -1));

        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });
        add(addtoCartButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 340, -1, -1));

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        add(quantitySpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 340, 40, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 340, -1, -1));

        btnSearchProduct.setText("Search Product");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });
        add(btnSearchProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, -1, -1));

        jLabel6.setText("Sales Price");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 340, -1, -1));
        add(txtSalesPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 340, 40, -1));

        jLabel7.setText("Item in cart");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, -1, -1));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 580, 110));

        btnViewOrderItem.setText("View Item");
        btnViewOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderItemActionPerformed(evt);
            }
        });
        add(btnViewOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 550, -1, -1));

        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });
        add(btnModifyQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 550, -1, -1));

        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });
        add(btnRemoveOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 550, -1, -1));

        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });
        add(btnCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 550, -1, -1));
        add(txtSearchKeyWord, new org.netbeans.lib.awtextra.AbsoluteConstraints(342, 140, 110, -1));
        add(txtNewQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 550, 70, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void suppComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppComboBox1ActionPerformed
        populateProductTable();
    }//GEN-LAST:event_suppComboBox1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        if(order.getOrderItems().size()>0){
            ArrayList<OrderItem> orderItems  = order.getOrderItems();
            for(OrderItem orderItem:orderItems){
                Product p = orderItem.getProduct();
                p.setAvail(orderItem.getQuantity()+p.getAvail());
            }
            
            order.getOrderItems().removeAll(orderItems);
        }
            
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void viewProdjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProdjButton2ActionPerformed
        
        int selectedRow = productTable.getSelectedRow();
              
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }
        
        Product p = (Product)productTable.getValueAt(selectedRow, 0);
        ViewProductDetailJPanel voidjp = new ViewProductDetailJPanel(userProcessContainer,p);
        userProcessContainer.add("ViewProductDetailJPanel",voidjp);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
        
    }//GEN-LAST:event_viewProdjButton2ActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        int selectedRow = productTable.getSelectedRow();
        Product selectedProduct;
        int salesPrice=0;
        
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }
        else{
            selectedProduct=(Product)productTable.getValueAt(selectedRow, 0);
        }
        
        try{
            salesPrice = Integer.parseInt(txtSalesPrice.getText());
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Sales Price");
        }
        
        if(salesPrice<selectedProduct.getPrice()){
            JOptionPane.showMessageDialog(null, "Sales price needs to be above base price");
            return;
        }
        
        int fetchQty = (Integer)quantitySpinner.getValue();
        if(fetchQty<=0){
            JOptionPane.showMessageDialog(null, "Quantity cant be negative or 0");
        }
        else if(fetchQty<=selectedProduct.getAvail()){
            boolean alreadyPresent= false;
            for(OrderItem orderItem: order.getOrderItems()){
                if(orderItem.getProduct()==selectedProduct){
                    int oldAvail = selectedProduct.getAvail();
                    int newAvail = oldAvail - fetchQty;
                    selectedProduct.setAvail(newAvail);
                    orderItem.setQuantity(fetchQty+orderItem.getQuantity());
                    alreadyPresent= true;
                    populateProductTable();
                    refershOrderTable();
                    break;
                }
            }
            
            if(!alreadyPresent){
                int oldAvail = selectedProduct.getAvail();
                int newAvail = oldAvail - fetchQty;
                selectedProduct.setAvail(newAvail);
                order.addOrderItem(selectedProduct, salesPrice, fetchQty);
                populateProductTable();
                refershOrderTable();
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Quantity requested is not available");
        }
          
    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void refershOrderTable(){
        
        int rowCount = orderTable.getRowCount();
        DefaultTableModel dtm = (DefaultTableModel)orderTable.getModel();
        
        for(int i=rowCount-1; i>=0;i--){
                dtm.removeRow(i);
        }
        
        for(OrderItem orderItem: order.getOrderItems()){
                Object row[] = new Object[4];
                row[0]=orderItem;
                row[1]=orderItem.getSalesPrice();
                row[2]=orderItem.getQuantity();
                row[3]=orderItem.getSalesPrice()*orderItem.getQuantity();
                dtm.addRow(row);
        }

        
    }
    
    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        if(order.getOrderItems().size()>0){
            masterOrderCatalog.addOrder(order);
            isCheckedOut=true;
            JOptionPane.showMessageDialog(null, "Order has been checkedout successfully!");
            order = new Order();
            refershOrderTable();
            populateProductTable();
        }
        else{
            JOptionPane.showMessageDialog(null, "Order has not been added because there are no items present in the cart!");
        }
       
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed

        int selectedRow = orderTable.getSelectedRow();
              
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }
        
        if(!txtNewQuantity.getText().isEmpty() && !txtNewQuantity.getText().equals("0")){
            OrderItem orderItem = (OrderItem)orderTable.getValueAt(selectedRow, 0);
            int currentAvail = orderItem.getProduct().getAvail();
            int oldQuantity = orderItem.getQuantity();
            int newQuantity = Integer.parseInt(txtNewQuantity.getText());
        
        
        if(newQuantity>(currentAvail+ oldQuantity)){
             JOptionPane.showMessageDialog(null, "Quantity exceeding the availability");
        }
        else{
            if(newQuantity<=0){
                JOptionPane.showMessageDialog(null, "Quantity should be poistive");
                return;
            }
            
            orderItem.setQuantity(newQuantity);
            orderItem.getProduct().setAvail(currentAvail+(oldQuantity-newQuantity));
            refershOrderTable();
            populateProductTable();
        }
        } 

    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed

        String prodName= txtSearchKeyWord.getText();
        refreshTableForSearch(prodName);
        
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed

        int rowCount = orderTable.getRowCount();
        if(rowCount<=0){
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }
        
        int selectedRow = orderTable.getSelectedRow();
        OrderItem orderItem=(OrderItem)orderTable.getValueAt(selectedRow, 0);
        int oldQuantity = orderItem.getProduct().getAvail();
        int orderQuantity = orderItem.getQuantity();
        int newQuantity = oldQuantity + orderQuantity;
        
        orderItem.getProduct().setAvail(newQuantity);
        order.removeOrderItem(orderItem);
        
        JOptionPane.showMessageDialog(null, "orderItem has been removed!");
        refershOrderTable();
        populateProductTable();
     
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnViewOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderItemActionPerformed

        int selectedRow = productTable.getSelectedRow();
              
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }
        
        OrderItem orderItem = (OrderItem)productTable.getValueAt(selectedRow, 0);
        ViewOrderItemDetailJPanel voidjp = new ViewOrderItemDetailJPanel(userProcessContainer,orderItem);
        userProcessContainer.add("ViewOrderItemDetailJPanel",voidjp);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_btnViewOrderItemActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JButton btnViewOrderItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox suppComboBox1;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtSalesPrice;
    private javax.swing.JTextField txtSearchKeyWord;
    private javax.swing.JButton viewProdjButton2;
    // End of variables declaration//GEN-END:variables
}
